{"version":3,"sources":["components/shared/topnav.js","components/shared/sidebar.js","App.js","serviceWorker.js","index.js"],"names":["Topnav","props","state","className","role","aria-label","href","src","alt","width","height","this","username","Component","Sidebar","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gNA8BeA,E,YA1Bb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,GAFG,E,sEAShB,OACE,yBAAKC,UAAU,SAASC,KAAK,aAAaC,aAAW,mBACnD,yBAAKF,UAAU,gBACb,uBAAGA,UAAU,cAAcG,KAAK,oBAC9B,yBAAKC,IAAI,yCAAyCC,IAAI,sEAAsEC,MAAM,MAAMC,OAAO,SAGnJ,yBAAKP,UAAU,cACb,yBAAKA,UAAU,eACXQ,KAAKV,MAAMW,gB,GApBJC,aC2CNC,E,2MA1CbZ,MAAQ,G,wEAIN,OACE,yBAAKC,UAAU,WACb,wBAAIA,UAAU,gBACZ,4BACE,uBAAGA,UAAU,uBADf,cAGE,wBAAIA,UAAU,UACZ,sCACA,2CACA,uCACA,4CAGJ,4BACE,uBAAGA,UAAU,uBADf,YAGE,wBAAIA,UAAU,UACZ,oCACA,qCACA,oCACA,qCACA,4CAGJ,4BACE,uBAAGA,UAAU,uBADf,cAGI,wBAAIA,UAAU,UACd,qCACA,qCACA,6C,GAnCQU,aCkCPE,E,2MA7Bbb,MAAQ,G,wEAKN,OAiBA,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAQS,SAAS,UACjB,kBAAC,EAAD,W,GAzBYC,aCMEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.36b84a4a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Topnav extends Component{\r\n  // = data in Vue\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n\r\n    };\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\r\n        <div className=\"navbar-brand\">\r\n          <a className=\"navbar-item\" href=\"https://bulma.io\">\r\n            <img src=\"https://bulma.io/images/bulma-logo.png\" alt=\"Bulma: Free, open source, and modern CSS framework based on Flexbox\" width=\"112\" height=\"28\"/>\r\n          </a>\r\n        </div>\r\n        <div className=\"navbar-end\">\r\n          <div className=\"navbar-item\">\r\n            { this.props.username }\r\n          </div>\r\n        </div>\r\n      </nav>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Topnav;","import React, { Component } from 'react';\r\n\r\nclass Sidebar extends Component {\r\n  state = {\r\n\r\n  };\r\n  render(){\r\n    return (\r\n      <nav className=\"sidenav\">\r\n        <ul className=\"main-buttons\">\r\n          <li>\r\n            <i className=\"fa fa-circle fa-2x\"></i>\r\n            Lorem Ipsum \r\n            <ul className=\"hidden\">\r\n              <li>TK-421</li>\r\n              <li>why aren't </li>\r\n              <li>you at </li>\r\n              <li>your post?</li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            <i className=\"fa fa-circle fa-2x\"></i>\r\n            Dolor Sit\r\n            <ul className=\"hidden\">\r\n              <li>Dark</li>\r\n              <li>Wings</li>\r\n              <li>Dark</li>\r\n              <li>Words</li>\r\n              <li>John SNUUW</li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            <i className=\"fa fa-circle fa-2x\"></i>\r\n              Consectetur\r\n              <ul className=\"hidden\">\r\n              <li>Lorem</li>\r\n              <li>Ipsum</li>\r\n              <li>Dolor</li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n  )};\r\n}\r\n\r\nexport default Sidebar;","import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport Topnav from './components/shared/topnav';\nimport Sidebar from './components/shared/sidebar'\n\nclass App extends Component {\n  state = {\n\n  };\n  \n  render(){\n    return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n    <div className=\"App\">\n      <Topnav username=\"admin\"/>\n      <Sidebar/>\n    </div>\n    );}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}