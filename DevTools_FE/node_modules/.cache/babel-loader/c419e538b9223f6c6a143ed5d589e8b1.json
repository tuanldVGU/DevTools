{"ast":null,"code":"import _objectWithoutProperties from \"D:\\\\workspace\\\\DevTools\\\\DevTools_FE\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"D:\\\\workspace\\\\DevTools\\\\DevTools_FE\\\\src\\\\components\\\\cerberus\\\\Cerberus.js\";\nimport React from 'react';\nimport { Route, useRouteMatch, Switch, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport LoginCerberus from './auth/login';\nimport Sidebar from '../shared/sidebar';\nimport Topnav from '../shared/topnav';\nimport Dashboard from './pages/Dashboard';\nimport Testsets from './pages/Testsets';\nimport Testplans from './pages/Testplans';\nimport Testcases from './pages/Testcases';\nimport Testtemplate from './pages/Template';\n\nconst Cerberus = props => {\n  let match = useRouteMatch();\n  let data = {\n    sidebar_logo: {\n      svg: '/logo/Cerberus_logo.svg',\n      name: 'cerberus'\n    },\n    sidebar_items: [{\n      id: 'sb_m_01',\n      icon: 'fas fa-file-alt',\n      main: 'Documentation',\n      subs: [{\n        id: 'sb_s_01_01',\n        name: 'Requirement',\n        link: '/cerberus/documentation/requirements'\n      }, {\n        id: 'sb_s_01_02',\n        name: 'Test Plan',\n        link: '/cerberus/testplans'\n      }, {\n        id: 'sb_s_01_03',\n        name: 'Report',\n        link: '/cerberus/documentation/report'\n      }]\n    }, {\n      id: 'sb_m_02',\n      icon: 'fas fa-vial',\n      main: 'Tools',\n      subs: [{\n        id: 'sb_s_02_01',\n        name: 'Test case',\n        link: '/cerberus/testcases'\n      }, {\n        id: 'sb_s_02_02',\n        name: 'Test set',\n        link: '/cerberus/testsets'\n      }, {\n        id: 'sb_s_02_03',\n        name: 'Template',\n        link: '/cerberus/testmanager/tmp'\n      }, {\n        id: 'sb_s_02_04',\n        name: 'Execution',\n        link: '/cerberus/testmanager/execution'\n      }]\n    }, {\n      id: 'sb_m_03',\n      icon: 'far fa-smile',\n      main: 'User',\n      subs: [{\n        id: 'sb_s_03_01',\n        name: 'Role',\n        link: '/cerberus/user/roles'\n      }]\n    }]\n  };\n\n  const ProtectedRoute = (_ref) => {\n    let children = _ref.children,\n        rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n    return React.createElement(Route, Object.assign({}, rest, {\n      render: () => props.isAuthenticated ? children : React.createElement(Redirect, {\n        to: '/cerberus/login',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"Cerberus\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, props.isAuthenticated ? React.createElement(Topnav, {\n    username: props.activeUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }) : null, props.isAuthenticated === true ? React.createElement(Sidebar, {\n    logo: data.sidebar_logo,\n    items: data.sidebar_items,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }) : null, React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(Route, {\n    path: `${match.path}/login`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, props.isAuthenticated ? React.createElement(Redirect, {\n    to: `${match.url}/`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }) : React.createElement(LoginCerberus, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  })), React.createElement(ProtectedRoute, {\n    path: `${match.path}/`,\n    exact: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(Dashboard, {\n    user: props.activeUser,\n    project: props.activeProject,\n    changeProj: props.changeProject,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  })), React.createElement(ProtectedRoute, {\n    path: `${match.path}/testplans`,\n    exact: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(Testplans, {\n    sets: props.testplans,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  })), React.createElement(ProtectedRoute, {\n    path: `${match.path}/testsets`,\n    exact: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(Testsets, {\n    sets: props.testsets,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  })), React.createElement(ProtectedRoute, {\n    path: `${match.path}/testcases`,\n    exact: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(Testcases, {\n    sets: props.testcases,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  })), React.createElement(ProtectedRoute, {\n    path: `${match.path}/temps`,\n    exact: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(Testtemplate, {\n    sets: props.testcases,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.isAuthenticated,\n    activeUser: state.activeUser,\n    activeProject: state.activeProject,\n    testsets: state.Testsets,\n    testcases: state.Testcases,\n    testplans: state.Testplans\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeProject: name => dispatch({\n      type: 'CER_PROJ_CHANGE',\n      value: name\n    }),\n    logOut: () => dispatch({\n      type: 'CER_LOGOUT'\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cerberus);","map":{"version":3,"sources":["D:/workspace/DevTools/DevTools_FE/src/components/cerberus/Cerberus.js"],"names":["React","Route","useRouteMatch","Switch","Redirect","connect","LoginCerberus","Sidebar","Topnav","Dashboard","Testsets","Testplans","Testcases","Testtemplate","Cerberus","props","match","data","sidebar_logo","svg","name","sidebar_items","id","icon","main","subs","link","ProtectedRoute","children","rest","isAuthenticated","activeUser","path","url","activeProject","changeProject","testplans","testsets","testcases","mapStateToProps","state","mapDispatchToProps","dispatch","type","value","logOut"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport { Route, useRouteMatch, Switch, Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\nimport LoginCerberus from './auth/login';\r\nimport Sidebar from '../shared/sidebar';\r\nimport Topnav from '../shared/topnav';\r\nimport Dashboard from './pages/Dashboard';\r\nimport Testsets from './pages/Testsets';\r\nimport Testplans from './pages/Testplans';\r\nimport Testcases from './pages/Testcases';\r\nimport Testtemplate from './pages/Template';\r\n\r\nconst Cerberus = props =>{  \r\n  let match = useRouteMatch();\r\n\r\n  let data = {\r\n    sidebar_logo: {\r\n      svg: '/logo/Cerberus_logo.svg',\r\n      name: 'cerberus'\r\n    },\r\n    sidebar_items: [\r\n      {\r\n        id:'sb_m_01',\r\n        icon: 'fas fa-file-alt',\r\n        main: 'Documentation',\r\n        subs: [\r\n          {\r\n            id:'sb_s_01_01',\r\n            name: 'Requirement',\r\n            link: '/cerberus/documentation/requirements'\r\n          },\r\n          {\r\n            id:'sb_s_01_02',\r\n            name: 'Test Plan',\r\n            link: '/cerberus/testplans'\r\n          },\r\n          {\r\n            id:'sb_s_01_03',\r\n            name: 'Report',\r\n            link: '/cerberus/documentation/report'\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id:'sb_m_02',\r\n        icon: 'fas fa-vial',\r\n        main: 'Tools',\r\n        subs: [\r\n          {\r\n            id:'sb_s_02_01',\r\n            name: 'Test case',\r\n            link: '/cerberus/testcases'\r\n          },\r\n          {\r\n            id:'sb_s_02_02',\r\n            name: 'Test set',\r\n            link: '/cerberus/testsets'\r\n          },\r\n          {\r\n            id:'sb_s_02_03',\r\n            name: 'Template',\r\n            link: '/cerberus/testmanager/tmp'\r\n          },\r\n          {\r\n            id:'sb_s_02_04',\r\n            name: 'Execution',\r\n            link: '/cerberus/testmanager/execution'\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id:'sb_m_03',\r\n        icon: 'far fa-smile',\r\n        main: 'User',\r\n        subs: [\r\n          {\r\n            id:'sb_s_03_01',\r\n            name: 'Role',\r\n            link: '/cerberus/user/roles'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n\r\n  const ProtectedRoute = ({children, ...rest}) => {\r\n    return (\r\n      <Route\r\n        {...rest}\r\n        render={() =>\r\n          props.isAuthenticated ? (children) : \r\n          (<Redirect to={'/cerberus/login'}/>)\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"Cerberus\">\r\n      {\r\n        props.isAuthenticated ? <Topnav username={props.activeUser}></Topnav>: null\r\n      }\r\n      {\r\n        props.isAuthenticated === true ? <Sidebar logo={data.sidebar_logo} items={data.sidebar_items}></Sidebar>: null\r\n      }\r\n      <Switch>\r\n        <Route path={`${match.path}/login`}>\r\n          {\r\n            props.isAuthenticated ? <Redirect to={`${match.url}/`}/> : <LoginCerberus></LoginCerberus>\r\n          }\r\n        </Route>\r\n        <ProtectedRoute path={`${match.path}/`} exact>\r\n          <Dashboard user={props.activeUser} project={props.activeProject} changeProj={props.changeProject}></Dashboard>\r\n        </ProtectedRoute>\r\n        <ProtectedRoute path={`${match.path}/testplans`} exact>\r\n          <Testplans sets={props.testplans}></Testplans>\r\n        </ProtectedRoute>\r\n        <ProtectedRoute path={`${match.path}/testsets`} exact>\r\n          <Testsets sets={props.testsets}></Testsets>\r\n        </ProtectedRoute>\r\n        <ProtectedRoute path={`${match.path}/testcases`} exact>\r\n          <Testcases sets={props.testcases}></Testcases>\r\n        </ProtectedRoute>\r\n        <ProtectedRoute path={`${match.path}/temps`} exact>\r\n          <Testtemplate sets={props.testcases}></Testtemplate>\r\n        </ProtectedRoute>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isAuthenticated: state.isAuthenticated,\r\n    activeUser: state.activeUser,\r\n    activeProject: state.activeProject,\r\n    testsets: state.Testsets,\r\n    testcases: state.Testcases,\r\n    testplans: state.Testplans\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    changeProject: (name) => dispatch({type: 'CER_PROJ_CHANGE',value: name}),\r\n    logOut: () => dispatch({type: 'CER_LOGOUT'})\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Cerberus);\r\n"]},"metadata":{},"sourceType":"module"}