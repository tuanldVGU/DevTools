{"ast":null,"code":"import _objectWithoutProperties from \"D:\\\\workspace\\\\DevTools\\\\DevTools_FE\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"D:\\\\workspace\\\\DevTools\\\\DevTools_FE\\\\src\\\\components\\\\cerberus\\\\Cerberus.js\";\nimport React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport LoginCerberus from './auth/login';\nimport HomeCerberus from './pages/index';\nimport Sidebar from '../../shared/sidebar';\nimport Topnav from '../../shared/topnav';\nimport Dashboard from './dashboard';\nimport Testsets from './Testsets';\n\nconst Cerberus = props => {\n  const rootPath = \"/cerberus\";\n  let data = {\n    sidebar_logo: {\n      svg: '/logo/Cerberus_logo.svg',\n      name: 'cerberus'\n    },\n    sidebar_items: [{\n      id: 'sb_m_01',\n      icon: 'fas fa-file-alt',\n      main: 'Documentation',\n      subs: [{\n        id: 'sb_s_01_01',\n        name: 'Requirement',\n        link: '/cerberus/documentation/requirements'\n      }, {\n        id: 'sb_s_01_02',\n        name: 'Test Plan',\n        link: '/cerberus/documentation/testplans'\n      }, {\n        id: 'sb_s_01_03',\n        name: 'Report',\n        link: '/cerberus/documentation/report'\n      }]\n    }, {\n      id: 'sb_m_02',\n      icon: 'fas fa-vial',\n      main: 'Tools',\n      subs: [{\n        id: 'sb_s_02_01',\n        name: 'Overview',\n        link: '/cerberus/testmanager/overview'\n      }, {\n        id: 'sb_s_02_02',\n        name: 'Test set',\n        link: '/cerberus/testsets'\n      }, {\n        id: 'sb_s_02_03',\n        name: 'Template',\n        link: '/cerberus/testmanager/tmp'\n      }, {\n        id: 'sb_s_02_04',\n        name: 'Execution',\n        link: '/cerberus/testmanager/execution'\n      }]\n    }, {\n      id: 'sb_m_03',\n      icon: 'far fa-smile',\n      main: 'User',\n      subs: [{\n        id: 'sb_s_03_01',\n        name: 'Role',\n        link: '/cerberus/user/roles'\n      }]\n    }]\n  };\n\n  const ProtectedRoute = (_ref) => {\n    let children = _ref.children,\n        rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n    return React.createElement(Route, Object.assign({}, rest, {\n      render: () => props.isAuthenticated ? children : React.createElement(Redirect, {\n        to: '/cerberus/login',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }));\n  };\n\n  const isTopNav = props => {\n    if (props.isAuthenticated) {\n      return React.createElement(Topnav, {\n        username: props.activeUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      });\n    }\n  };\n\n  const isSidebar = props => {\n    if (props.isAuthenticated) {\n      return React.createElement(Sidebar, {\n        logo: data.sidebar_logo,\n        items: data.sidebar_items,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"Cerberus\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, isTopNav, isSidebar, React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(Route, {\n    path: `${rootPath}/login`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, props.isAuthenticated ? React.createElement(Redirect, {\n    to: `${rootPath}/`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }) : React.createElement(LoginCerberus, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  })), React.createElement(ProtectedRoute, {\n    path: `${rootPath}/`,\n    exact: true,\n    component: Dashboard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  })));\n};\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.isAuthenticated,\n    activeUser: state.activeUser,\n    activeProject: state.activeProject,\n    Testsets: state.Testsets\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeProject: name => dispatch({\n      type: 'CER_PROJ_CHANGE',\n      value: name\n    }),\n    logOut: () => dispatch({\n      type: 'CER_LOGOUT'\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cerberus);","map":{"version":3,"sources":["D:/workspace/DevTools/DevTools_FE/src/components/cerberus/Cerberus.js"],"names":["React","Route","Switch","Redirect","connect","LoginCerberus","HomeCerberus","Sidebar","Topnav","Dashboard","Testsets","Cerberus","props","rootPath","data","sidebar_logo","svg","name","sidebar_items","id","icon","main","subs","link","ProtectedRoute","children","rest","isAuthenticated","isTopNav","activeUser","isSidebar","mapStateToProps","state","activeProject","mapDispatchToProps","dispatch","changeProject","type","value","logOut"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Route, Switch, Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\nimport LoginCerberus from './auth/login';\r\nimport HomeCerberus from './pages/index';\r\nimport Sidebar from '../../shared/sidebar';\r\nimport Topnav from '../../shared/topnav';\r\nimport Dashboard from './dashboard';\r\nimport Testsets from './Testsets';\r\n\r\nconst Cerberus = (props) =>{  \r\n  const rootPath= \"/cerberus\";\r\n\r\n  let data = {\r\n    sidebar_logo: {\r\n      svg: '/logo/Cerberus_logo.svg',\r\n      name: 'cerberus'\r\n    },\r\n    sidebar_items: [\r\n      {\r\n        id:'sb_m_01',\r\n        icon: 'fas fa-file-alt',\r\n        main: 'Documentation',\r\n        subs: [\r\n          {\r\n            id:'sb_s_01_01',\r\n            name: 'Requirement',\r\n            link: '/cerberus/documentation/requirements'\r\n          },\r\n          {\r\n            id:'sb_s_01_02',\r\n            name: 'Test Plan',\r\n            link: '/cerberus/documentation/testplans'\r\n          },\r\n          {\r\n            id:'sb_s_01_03',\r\n            name: 'Report',\r\n            link: '/cerberus/documentation/report'\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id:'sb_m_02',\r\n        icon: 'fas fa-vial',\r\n        main: 'Tools',\r\n        subs: [\r\n          {\r\n            id:'sb_s_02_01',\r\n            name: 'Overview',\r\n            link: '/cerberus/testmanager/overview'\r\n          },\r\n          {\r\n            id:'sb_s_02_02',\r\n            name: 'Test set',\r\n            link: '/cerberus/testsets'\r\n          },\r\n          {\r\n            id:'sb_s_02_03',\r\n            name: 'Template',\r\n            link: '/cerberus/testmanager/tmp'\r\n          },\r\n          {\r\n            id:'sb_s_02_04',\r\n            name: 'Execution',\r\n            link: '/cerberus/testmanager/execution'\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id:'sb_m_03',\r\n        icon: 'far fa-smile',\r\n        main: 'User',\r\n        subs: [\r\n          {\r\n            id:'sb_s_03_01',\r\n            name: 'Role',\r\n            link: '/cerberus/user/roles'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n\r\n  const ProtectedRoute = ({children, ...rest}) => {\r\n    return (\r\n      <Route\r\n        {...rest}\r\n        render={() =>\r\n          props.isAuthenticated ? (children) : \r\n          (<Redirect to={'/cerberus/login'}/>)\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  const isTopNav = props => {\r\n    if (props.isAuthenticated){\r\n      return (\r\n        <Topnav username={props.activeUser}></Topnav>\r\n      );\r\n    }\r\n  }\r\n\r\n  const isSidebar = props => {\r\n    if (props.isAuthenticated){\r\n      return (\r\n        <Sidebar logo={data.sidebar_logo} items={data.sidebar_items}/>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Cerberus\">\r\n      {isTopNav}\r\n      {isSidebar}\r\n      <Switch>\r\n        <Route path={`${rootPath}/login`}>\r\n          {\r\n            props.isAuthenticated ? <Redirect to={`${rootPath}/`}/> : <LoginCerberus></LoginCerberus>\r\n          }\r\n        </Route>\r\n        <ProtectedRoute path={`${rootPath}/`} exact component={Dashboard}>\r\n        </ProtectedRoute>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isAuthenticated: state.isAuthenticated,\r\n    activeUser: state.activeUser,\r\n    activeProject: state.activeProject,\r\n    Testsets: state.Testsets\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    changeProject: (name) => dispatch({type: 'CER_PROJ_CHANGE',value: name}),\r\n    logOut: () => dispatch({type: 'CER_LOGOUT'})\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Cerberus);\r\n"]},"metadata":{},"sourceType":"module"}